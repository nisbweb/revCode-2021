// find the number of 1s in the question
const Ques1 = (data) => {
  let pat = new RegExp(/[^0-9]/)
  if (pat.test(data))
    return "Please enter a valid positive integer"
  return data.split("1").length - 1;
};



// Given a number n, find the number of prime number in the range (1,n]
const Ques2 = (data) => {

  let pat = new RegExp(/[^0-9]/)
  if (pat.test(data))
    return "Please enter a valid integer"
  if (Number(data) > 10000000)
    return "Please enter a valid integer less than 10000000"
  var sieve = [],
    i,
    j,
    count = 0;
  for (i = 2; i <= data; ++i) {
    if (!sieve[i]) {
      count += 1;
      for (j = i << 1; j <= data; j += i) {
        sieve[j] = !0;
      }
    }
  }
  return count;
};



// Given an array of elements, return an array of elements where each element is divided by the length of the array
const Ques3 = (data) => {
  data = data.trim()
  let pat2 = new RegExp(/^(\d+,)*\d+$/)
  if (!pat2.test(data))
    return "Please enter a valid list of integers"
  data = data.split(",");
  let pat = new RegExp(/[^0-9]/)
  let evals = false
  data.forEach((ele) => {
    if (pat.test(ele))
      evals = true
  })
  if (evals)
    return "Please enter a valid list of integers"
  let returnArr = [];
  data.forEach((item) => {
    returnArr.push((parseInt(item) / data.length) | 0);
  });
  return returnArr.join(",");
};



// Given a string, if the first character is a vowel, reverse it . Otherwise shift the letters by 1
const Ques4 = (data) => {
  data = data.toLowerCase()
  let pat = new RegExp(/[^a-zA-Z]/)
  if (pat.test(data))
    return "String cannot contain non alphabet or spaces"
  data = data.replace(/[^a-zA-Z]/g, "");
  var vowels = ["a", "e", "i", "o", "u"];
  if (vowels.includes(data[0])) {
    return data.split("").reverse().join("");
  }
  var returnString = "";
  for (var i = 0; i < data.length; i++) {
    var char = data[i].charCodeAt() + 1;
    if (char > 122) {
      char = 97;
    }
    console.log(returnString)
    returnString += String.fromCharCode(char);
  }
  return returnString;
};



// given a string , return a number equal to (number of consonants) - ( number of vowels)
const Ques5 = (data) => {
  data = data.toLowerCase()
  let pat = new RegExp(/[^a-zA-Z]/)
  if (pat.test(data))
    return "String cannot contain non alphabet characters"
  data = data.replace(/[^a-zA-Z]/g, "");
  var vowels = ["a", "e", "i", "o", "u"];
  var countConsonants = 0;
  var countVowels = 0;
  for (var letter of data) {
    if (vowels.includes(letter)) {
      countVowels += 1;
    } else {
      countConsonants += 1;
    }
  }
  return countConsonants - countVowels;
};



// find the sum of the ascii values of the characters in the prime indexes
const Ques6 = (data) => {
  let pat = new RegExp(/\s|[^a-zA-Z]/)
  if (pat.test(data))
    return "String cannot contain non alphabet characters"
  data = data.replace(/[^a-zA-Z]/g, "");
  var primeNumbers = getPrimes(data.length);
  var returnSum = 0;
  for (var i = 0; i < data.length; i++) {
    if (primeNumbers.includes(i)) {
      returnSum += data[i].charCodeAt();
    }
  }
  return returnSum;
};



function getPrimes(max) {
  var sieve = [],
    i,
    j,
    primes = [];
  for (i = 2; i <= max; ++i) {
    if (!sieve[i]) {
      primes.push(i);
      for (j = i << 1; j <= max; j += i) {
        sieve[j] = !0;
      }
    }
  }
  return primes;
}



const OutPut = (data) => { };
const expo = {
  ques1: Ques1,
  ques2: Ques2,
  ques3: Ques3,
  ques4: Ques4,
  ques5: Ques5,
  ques6: Ques6,
  output: OutPut,
};
export default expo;
